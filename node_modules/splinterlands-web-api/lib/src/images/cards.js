"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCardImageLevelById = exports.getCardImageBaseById = void 0;
var cards = require("../cards.json");
var NEW_REWARD_CARD_ID_START = 330;
var IMAGE_BASE_URL = 'https://d36mxiodymuqjm.cloudfront.net/';
var CARD_SETS = [
    'cards_v2.2',
    'cards_beta',
    'cards_v2.2',
    'cards_beta',
    'cards_untamed',
    'cards_untamed',
    'cards_gladiator',
    'cards_chaos',
    'cards_riftwatchers',
    'cards_soulbound',
    'cards_soulbound'
];
var CARD_EDITIONS = ['alpha', 'beta', 'promo', 'reward', 'untamed', 'dice', 'gladius', 'chaos', 'rift', 'unknown', 'soulbound'];
function getCardImageBaseById(cardInfo, gold, edition) {
    if (gold === void 0) { gold = false; }
    var cardDetail;
    if (typeof cardInfo === 'number') {
        if (cardInfo > cards.length) {
            throw new Error('This card is not yet supported. Please make an issue request for the package');
        }
        cardDetail = cards[cardInfo - 1];
    }
    else {
        cardDetail = cardInfo;
    }
    var allEditions = cardDetail.editions.split(',');
    edition = edition !== null && edition !== void 0 ? edition : Number(allEditions[allEditions.length - 1]);
    var cardName = cardDetail.name;
    return getCardImageBaseByCardInfo(cardName, edition, cardDetail.id, gold);
}
exports.getCardImageBaseById = getCardImageBaseById;
function getCardImageLevelById(cardInfo, level, isGold, edition) {
    if (isGold === void 0) { isGold = false; }
    var cardDetail;
    if (typeof cardInfo === 'number') {
        if (cardInfo > cards.length) {
            throw new Error('This card is not yet supported. Please make an issue request for the package');
        }
        cardDetail = cards[cardInfo - 1];
    }
    else {
        cardDetail = cardInfo;
    }
    var allEditions = cardDetail.editions.split(',');
    edition = edition !== null && edition !== void 0 ? edition : Number(allEditions[allEditions.length - 1]);
    var cardName = cardDetail.name;
    return getCardImageLevelByCardInfo(cardName, edition, level, isGold);
}
exports.getCardImageLevelById = getCardImageLevelById;
function getCardImageBaseByCardInfo(cardName, edition, id, gold) {
    if (gold === void 0) { gold = false; }
    var extension = id > NEW_REWARD_CARD_ID_START ? '.jpg' : '.png';
    var url = "".concat(IMAGE_BASE_URL).concat(CARD_SETS[edition], "/").concat(cardName);
    if (gold) {
        url += '_gold';
    }
    url += extension;
    return encodeURI(url);
}
function getCardImageLevelByCardInfo(name, edition, level, isGold) {
    if (isGold === void 0) { isGold = false; }
    var cardEdition = CARD_EDITIONS[edition];
    var gold = isGold ? '_gold' : '';
    var url = "".concat(IMAGE_BASE_URL, "cards_by_level/").concat(cardEdition, "/").concat(name, "_lv").concat(level).concat(gold, ".png");
    return encodeURI(url);
}
