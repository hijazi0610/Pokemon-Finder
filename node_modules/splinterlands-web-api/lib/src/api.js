"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGuildMembers = exports.getForSaleByCard = exports.getForSaleGrouped = exports.getActiveRentals = exports.getForRentByCard = exports.getForRentCardSummary = exports.getSettings = exports.getOutstandingMatch = exports.getSingleBattle = exports.getPlayerCollectionCards = exports.getCardDetailsFromUid = exports.getAllCardDetails = exports.getPlayerDetails = exports.getPlayerQuest = exports.getPlayerBattles = void 0;
var DEFAULT_API_URL = 'https://api2.splinterlands.com/';
var GET_ALL_CARDS_ENDPOINT = 'cards/get_details';
var GET_COLLECTION_ENDPOINT = 'cards/collection/';
var GET_BATTLES_ENDPOINT = 'battle/history?player=';
var GET_QUEST_ENDPOINT = 'players/quests?username=';
var GET_SINGLE_BATTLE_ENDPOINT = 'battle/result?id=';
var OUTSTANDING_MATCH_ENDPOINT = 'players/outstanding_match?username=';
var CARD_DETAILS_ENDPOINT = 'cards/find?ids=';
var SETTINGS_ENDPOINT = 'settings';
var GET_PLAYER_DETAILS_ENDPOINT = 'players/details?name=';
var FOR_RENT_GROUPED_ENDPOINT = 'market/for_rent_grouped';
var FOR_RENT_BY_CARD_ENDPOINT = 'market/for_rent_by_card';
var ACTIVE_RENTALS_ENDPOINT = 'market/active_rentals?owner=';
var FOR_SALE_GROUPED_ENDPOINT = 'market/for_sale_grouped';
var FOR_SALE_BY_CARD_ENDPOINT = 'market/for_sale_by_card';
var GUILD_MEMBERS_ENDPOINT = 'guilds/members?guild_id=';
/**
 * Returns the past 50 battles from the user.
 * https://api2.splinterlands.com/battle/history?player=bubke
 */
function getPlayerBattles(player, format) {
    return __awaiter(this, void 0, void 0, function () {
        var postFix;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    postFix = format ? "&format=".concat(format) : '';
                    return [4 /*yield*/, makeApiGetRequest(GET_BATTLES_ENDPOINT + player + postFix).then(function (response) {
                            return response.json();
                        })];
                case 1: return [2 /*return*/, (_a.sent())];
            }
        });
    });
}
exports.getPlayerBattles = getPlayerBattles;
/**
 * Returns the player quest information
 * https://api2.splinterlands.com/players/quests?username=bubke
 */
function getPlayerQuest(player) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, makeApiGetRequest(GET_QUEST_ENDPOINT + player).then(function (response) { return response.json(); })];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.getPlayerQuest = getPlayerQuest;
/**
 * Returns the information of a player
 * https://api2.splinterlands.com/players/details?name=bubke
 */
function getPlayerDetails(player) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, makeApiGetRequest(GET_PLAYER_DETAILS_ENDPOINT + player).then(function (response) {
                        return response.json();
                    })];
                case 1: return [2 /*return*/, (_a.sent())];
            }
        });
    });
}
exports.getPlayerDetails = getPlayerDetails;
/**
 * Returns the details of all cards.
 * https://api2.splinterlands.com/cards/get_details
 */
function getAllCardDetails() {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, makeApiGetRequest(GET_ALL_CARDS_ENDPOINT).then(function (response) { return response.json(); })];
        });
    });
}
exports.getAllCardDetails = getAllCardDetails;
/**
 * Returns the details of the given cards uids.
 * https://api2.splinterlands.com/cards/find?ids=C4-159-5PENLDCX68,C7-401-KHC7OS88PS
 */
function getCardDetailsFromUid(cards) {
    return __awaiter(this, void 0, void 0, function () {
        var cardsStr;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    cardsStr = cards.join(',');
                    return [4 /*yield*/, makeApiGetRequest(CARD_DETAILS_ENDPOINT + cardsStr).then(function (response) { return response.json(); })];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.getCardDetailsFromUid = getCardDetailsFromUid;
/**
 * Returns the details of cards that the player has.
 * https://api2.splinterlands.com/cards/collection/bubke
 */
function getPlayerCollectionCards(player) {
    return __awaiter(this, void 0, void 0, function () {
        var playerCardResponse;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, makeApiGetRequest(GET_COLLECTION_ENDPOINT + player).then(function (response) {
                        return response.json();
                    })];
                case 1:
                    playerCardResponse = (_a.sent());
                    return [2 /*return*/, playerCardResponse];
            }
        });
    });
}
exports.getPlayerCollectionCards = getPlayerCollectionCards;
/**
 * Returns the results of a historical battle by battleId.
 * https://api2.splinterlands.com/battle/result?id=sm_gyjLSvXAUyhWfBhJOymA
 */
function getSingleBattle(battleId) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, makeApiGetRequest(GET_SINGLE_BATTLE_ENDPOINT + battleId).then(function (response) {
                        return response.json();
                    })];
                case 1: return [2 /*return*/, (_a.sent())];
            }
        });
    });
}
exports.getSingleBattle = getSingleBattle;
/**
 * Returns the current match info of
 * https://api2.splinterlands.com/players/outstanding_match?username=bubke&token=accessToken
 */
function getOutstandingMatch(player, accessToken) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, makeApiGetRequest(OUTSTANDING_MATCH_ENDPOINT + player + "&token=".concat(accessToken)).then(function (response) {
                        return response.json();
                    })];
                case 1: return [2 /*return*/, (_a.sent())];
            }
        });
    });
}
exports.getOutstandingMatch = getOutstandingMatch;
/**
 * Returns the settings from the Splinterlands.
 * https://api2.splinterlands.com/settings
 */
function getSettings() {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, makeApiGetRequest(SETTINGS_ENDPOINT).then(function (response) {
                        return response.json();
                    })];
                case 1: return [2 /*return*/, (_a.sent())];
            }
        });
    });
}
exports.getSettings = getSettings;
/**
 * Returns the summary of all cards that are for rent.
 * https://api2.splinterlands.com/market/for_rent_grouped
 */
function getForRentCardSummary() {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, makeApiGetRequest(FOR_RENT_GROUPED_ENDPOINT).then(function (response) { return response.json(); })];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.getForRentCardSummary = getForRentCardSummary;
/**
 * Returns the summary of all cards that are for rent.
 * https://api2.splinterlands.com/market/for_rent_by_card?card_detail_id=205&gold=false&edition=2
 */
function getForRentByCard(cardId, edition, gold) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, makeApiGetRequest(FOR_RENT_BY_CARD_ENDPOINT + "?card_detail_id=".concat(cardId, "&gold=").concat(gold, "&edition=").concat(edition)).then(function (response) { return response.json(); })];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.getForRentByCard = getForRentByCard;
/**
 * Returns the all active rentals by username
 * https://api2.splinterlands.com/market/active_rentals?owner=bubke
 */
function getActiveRentals(owner) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, makeApiGetRequest(ACTIVE_RENTALS_ENDPOINT + owner).then(function (response) { return response.json(); })];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.getActiveRentals = getActiveRentals;
/**
 * Returns the summary of all cards that are for sale.
 * https://api2.splinterlands.com/market/for_sale_grouped
 */
function getForSaleGrouped() {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, makeApiGetRequest(FOR_SALE_GROUPED_ENDPOINT).then(function (response) { return response.json(); })];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.getForSaleGrouped = getForSaleGrouped;
/**
 * Returns the detailed market for sale information by card
 * https://api2.splinterlands.com/market/for_sale_by_card?card_detail_id=334&gold=false&edition=3
 */
function getForSaleByCard(cardId, edition, gold) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, makeApiGetRequest(FOR_SALE_BY_CARD_ENDPOINT + "?card_detail_id=".concat(cardId, "&gold=").concat(gold, "&edition=").concat(edition)).then(function (response) { return response.json(); })];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.getForSaleByCard = getForSaleByCard;
/**
 * Returns the member information for a guild.
 * https://api2.splinterlands.com/guilds/members?guild_id=36f92c816a25becbdc351abbc82c0ac62ea532d5
 */
function getGuildMembers(guildId) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, makeApiGetRequest(GUILD_MEMBERS_ENDPOINT + guildId).then(function (response) { return response.json(); })];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.getGuildMembers = getGuildMembers;
var makeApiGetRequest = function (endpoint) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, fetch(DEFAULT_API_URL + endpoint)];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
